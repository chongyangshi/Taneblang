-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParTaneb where
import AbsTaneb
import LexTaneb
import ErrM

}

%name pExp Exp
%name pExp1 Exp1
%name pStm Stm
%name pStm1 Stm1

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '(' { PT _ (TS _ 1) }
 ')' { PT _ (TS _ 2) }
 '-' { PT _ (TS _ 3) }
 ';' { PT _ (TS _ 4) }
 '<' { PT _ (TS _ 5) }
 '>' { PT _ (TS _ 6) }
 'A' { PT _ (TS _ 7) }
 'B' { PT _ (TS _ 8) }
 'E' { PT _ (TS _ 9) }
 'N' { PT _ (TS _ 10) }
 'T' { PT _ (TS _ 11) }

L_integ  { PT _ (TI $$) }
L_RNo { PT _ (T_RNo $$) }
L_err    { _ }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
RNo    :: { RNo} : L_RNo { RNo ($1)}

Exp :: { Exp }
Exp : Integer { IInt $1 } 
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : '-' Integer { INeg $2 } 
  | '(' Exp ')' { $2 }


Stm :: { Stm }
Stm : Stm1 ';' Stm { Seqn $1 $3 } 
  | Stm1 { $1 }


Stm1 :: { Stm }
Stm1 : 'T' RNo '<' Stm1 '>' '<' Stm1 '>' { Ifblk $2 $4 $7 } 
  | Exp 'A' RNo { RAdd $1 $3 }
  | 'N' RNo '<' Stm1 '>' { Whblk $2 $4 }
  | 'E' RNo { Prnt $2 }
  | 'B' RNo { Prd $2 }
  | '(' Stm ')' { $2 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

